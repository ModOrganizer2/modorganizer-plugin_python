from __future__ import annotations

import typing

import PyQt6.QtCore

from mobase import MoVariant

__all__ = [
    "SimpleEnum",
    "consume_qstring_with_emoji",
    "create_qstring_with_emoji",
    "datetime_from_string",
    "datetime_to_string",
    "int_to_qstring",
    "qflags_create",
    "qflags_explode",
    "qmap_to_length",
    "qstring_to_int",
    "qstring_to_stdstring",
    "qstringlist_at",
    "qstringlist_join",
    "qvariant_bool",
    "qvariant_from_bool",
    "qvariant_from_int",
    "qvariant_from_list",
    "qvariant_from_map",
    "qvariant_from_none",
    "qvariant_from_str",
    "qvariant_int",
    "qvariant_list",
    "qvariant_map",
    "qvariant_none",
    "qvariant_str",
    "stdstring_to_qstring",
]

class SimpleEnum:
    """
    Members:

      Value0

      Value1

      Value2
    """

    Value0: typing.ClassVar[SimpleEnum]  # value = <SimpleEnum.Value0: 1>
    Value1: typing.ClassVar[SimpleEnum]  # value = <SimpleEnum.Value1: 2>
    Value2: typing.ClassVar[SimpleEnum]  # value = <SimpleEnum.Value2: 4>
    __members__: typing.ClassVar[
        dict[str, SimpleEnum]
    ]  # value = {'Value0': <SimpleEnum.Value0: 1>, 'Value1': <SimpleEnum.Value1: 2>, 'Value2': <SimpleEnum.Value2: 4>}
    def __and__(self, other: typing.Any) -> typing.Any: ...
    def __eq__(self, other: typing.Any) -> bool: ...
    def __ge__(self, other: typing.Any) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: typing.Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> typing.Any: ...
    def __le__(self, other: typing.Any) -> bool: ...
    def __lt__(self, other: typing.Any) -> bool: ...
    def __ne__(self, other: typing.Any) -> bool: ...
    def __or__(self, other: typing.Any) -> typing.Any: ...
    def __rand__(self, other: typing.Any) -> typing.Any: ...
    def __repr__(self) -> str: ...
    def __ror__(self, other: typing.Any) -> typing.Any: ...
    def __rxor__(self, other: typing.Any) -> typing.Any: ...
    def __setstate__(self, state: int) -> None: ...
    def __str__(self) -> str: ...
    def __xor__(self, other: typing.Any) -> typing.Any: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def consume_qstring_with_emoji(arg0: str) -> int: ...
def create_qstring_with_emoji() -> str: ...
def datetime_from_string(
    string: str, format: PyQt6.QtCore.Qt.DateFormat = ...
) -> PyQt6.QtCore.QDateTime: ...
def datetime_to_string(
    datetime: PyQt6.QtCore.QDateTime, format: PyQt6.QtCore.Qt.DateFormat = ...
) -> str: ...
def int_to_qstring(arg0: int) -> str: ...
def qflags_create(arg0: bool, arg1: bool, arg2: bool) -> int: ...
def qflags_explode(arg0: int) -> tuple[int, bool, bool, bool]: ...
def qmap_to_length(arg0: dict[str, str]) -> dict[str, int]: ...
def qstring_to_int(arg0: str) -> int: ...
def qstring_to_stdstring(arg0: str) -> str: ...
def qstringlist_at(arg0: typing.Sequence[str], arg1: int) -> str: ...
def qstringlist_join(arg0: typing.Sequence[str], arg1: str) -> str: ...
def qvariant_bool() -> MoVariant: ...
def qvariant_from_bool(arg0: MoVariant) -> tuple[bool, bool]: ...
def qvariant_from_int(arg0: MoVariant) -> tuple[bool, int]: ...
def qvariant_from_list(arg0: MoVariant) -> tuple[bool, typing.Sequence[MoVariant]]: ...
def qvariant_from_map(arg0: MoVariant) -> tuple[bool, dict[str, MoVariant]]: ...
def qvariant_from_none(arg0: MoVariant) -> tuple[bool, bool]: ...
def qvariant_from_str(arg0: MoVariant) -> tuple[bool, str]: ...
def qvariant_int() -> MoVariant: ...
def qvariant_list() -> MoVariant: ...
def qvariant_map() -> dict[str, MoVariant]: ...
def qvariant_none() -> MoVariant: ...
def qvariant_str() -> MoVariant: ...
def stdstring_to_qstring(arg0: str) -> str: ...
